{"ast":null,"code":"import multer from 'multer';\nimport Cors from 'cors';\nimport multerS3 from 'multer-s3';\nimport nextConnect from 'next-connect';\nimport aws from \"aws-sdk\";\nimport { Textract } from \"@aws-sdk/client-textract\";\nexport const config = {\n  api: {\n    bodyParser: false // Disallow body parsing, consume as stream\n\n  }\n};\nconst s3 = new aws.S3({\n  region: 'eu-west-3'\n});\nconst apiRoute = nextConnect({\n  onError(error, req, res) {\n    res.status(501).json({\n      error: `Sorry something Happened! ${error.message}`\n    });\n  },\n\n  onNoMatch(req, res) {\n    res.status(405).json({\n      error: `Method '${req.method}' Not Allowed`\n    });\n  }\n\n});\nconst upload = multer({\n  limits: {\n    // Max file size (5 mb)\n    fileSize: 1024 * 1024 * 5\n  },\n  storage: multerS3({\n    s3: s3,\n    bucket: 'cositasalcanal',\n    metadata: function (req, file, cb) {\n      cb(null, {\n        fieldName: file.fieldname\n      });\n    },\n    key: function (req, file, cb) {\n      req.s3Filename = Date.now().toString();\n      cb(null, req.s3Filename);\n    }\n  })\n});\n\nconst textTractMiddleware = async (req, res, next) => {\n  const textParams = {\n    Document: {\n      S3Object: {\n        Bucket: \"cositasalcanal\",\n        Name: req.s3Filename\n      }\n    }\n  };\n  const textTract = new Textract({\n    region: 'eu-west-3'\n  });\n  let textTractData;\n\n  try {\n    textTractData = await textTract.analyzeExpense(textParams);\n  } catch (e) {\n    textTractData = e;\n  }\n\n  req.textTractData = textTractData; // req.normalizedData = normalizeTextTractData(textTractData);\n\n  next();\n};\n\nconst normalizeTextTractData = textTractData => {\n  const rawLines = textTractData.ExpenseDocuments[0].LineItemGroups[0].LineItems;\n  const rawSummary = textTractData.ExpenseDocuments[0].SummaryFields;\n  const lines = rawLines.map(line => ({\n    fields: line.LineItemExpenseFields.map(field => {\n      var _field$Type, _field$ValueDetection, _field$LabelDetection;\n\n      return {\n        type: field === null || field === void 0 ? void 0 : (_field$Type = field.Type) === null || _field$Type === void 0 ? void 0 : _field$Type.Text,\n        value: field === null || field === void 0 ? void 0 : (_field$ValueDetection = field.ValueDetection) === null || _field$ValueDetection === void 0 ? void 0 : _field$ValueDetection.Text,\n        label: field === null || field === void 0 ? void 0 : (_field$LabelDetection = field.LabelDetection) === null || _field$LabelDetection === void 0 ? void 0 : _field$LabelDetection.Text\n      };\n    })\n  }));\n  const summary = rawSummary.map(line => {\n    var _line$Type, _line$ValueDetection, _line$LabelDetection;\n\n    return {\n      type: line === null || line === void 0 ? void 0 : (_line$Type = line.Type) === null || _line$Type === void 0 ? void 0 : _line$Type.Text,\n      value: line === null || line === void 0 ? void 0 : (_line$ValueDetection = line.ValueDetection) === null || _line$ValueDetection === void 0 ? void 0 : _line$ValueDetection.Text,\n      label: line === null || line === void 0 ? void 0 : (_line$LabelDetection = line.LabelDetection) === null || _line$LabelDetection === void 0 ? void 0 : _line$LabelDetection.Text\n    };\n  });\n  return {\n    lines,\n    summary\n  };\n}; // apiRoute.use(upload.single('image'));\n// apiRoute.use(textTractMiddleware);\n\n\napiRoute.use(Cors());\napiRoute.get((req, res) => {\n  res.status(200).json({\n    data: 'patata'\n  });\n});\nexport default apiRoute;","map":{"version":3,"sources":["/Users/gotre/projects/lupita/pages/api/upload.js"],"names":["multer","Cors","multerS3","nextConnect","aws","Textract","config","api","bodyParser","s3","S3","region","apiRoute","onError","error","req","res","status","json","message","onNoMatch","method","upload","limits","fileSize","storage","bucket","metadata","file","cb","fieldName","fieldname","key","s3Filename","Date","now","toString","textTractMiddleware","next","textParams","Document","S3Object","Bucket","Name","textTract","textTractData","analyzeExpense","e","normalizeTextTractData","rawLines","ExpenseDocuments","LineItemGroups","LineItems","rawSummary","SummaryFields","lines","map","line","fields","LineItemExpenseFields","field","type","Type","Text","value","ValueDetection","label","LabelDetection","summary","use","get","data"],"mappings":"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","sourcesContent":["import multer from 'multer';\nimport Cors from 'cors';\nimport multerS3 from 'multer-s3';\nimport nextConnect from 'next-connect';\nimport aws from \"aws-sdk\";\nimport {Textract} from \"@aws-sdk/client-textract\";\n\n\nexport const config = {\n    api: {\n        bodyParser: false, // Disallow body parsing, consume as stream\n    },\n};\n\nconst s3 = new aws.S3({ region: 'eu-west-3' });\n\nconst apiRoute = nextConnect({\n    onError(error, req, res) {\n        res.status(501).json({ error: `Sorry something Happened! ${error.message}` });\n    },\n    onNoMatch(req, res) {\n        res.status(405).json({ error: `Method '${req.method}' Not Allowed` });\n    },\n});\n\nconst upload = multer({\n    limits: {\n        // Max file size (5 mb)\n        fileSize: 1024 * 1024 * 5,\n    },\n    storage: multerS3({\n        s3: s3,\n        bucket: 'cositasalcanal',\n        metadata: function (req, file, cb) {\n            cb(null, {fieldName: file.fieldname});\n        },\n        key: function (req, file, cb) {\n            req.s3Filename = Date.now().toString();\n            cb(null, req.s3Filename)\n        },\n\n    })\n})\n\n\nconst textTractMiddleware = async (req, res, next) => {\n    const textParams = {\n        Document: {\n            S3Object: {\n                Bucket: \"cositasalcanal\",\n                Name: req.s3Filename,\n            }\n        },\n    }\n\n    const textTract = new Textract({ region: 'eu-west-3'});\n    let textTractData;\n    try {\n        textTractData = await textTract.analyzeExpense(textParams);\n    } catch (e) {\n        textTractData = e;\n    }\n\n\n    req.textTractData = textTractData;\n    // req.normalizedData = normalizeTextTractData(textTractData);\n    next();\n};\n\n\nconst normalizeTextTractData = (textTractData) => {\n    const rawLines = textTractData.ExpenseDocuments[0].LineItemGroups[0].LineItems;\n    const rawSummary = textTractData.ExpenseDocuments[0].SummaryFields;\n    const lines = rawLines.map(line => ({\n        fields: line.LineItemExpenseFields.map(field =>\n            ({\n                type: field?.Type?.Text,\n                value: field?.ValueDetection?.Text,\n                label: field?.LabelDetection?.Text\n            })),\n    }));\n    const summary = rawSummary.map(line => ({\n        type: line?.Type?.Text,\n        value: line?.ValueDetection?.Text,\n        label: line?.LabelDetection?.Text\n    }));\n    return  {\n        lines,\n        summary,\n    }\n}\n\n// apiRoute.use(upload.single('image'));\n// apiRoute.use(textTractMiddleware);\n\napiRoute.use(Cors());\napiRoute.get((req, res) => {\n    res.status(200).json({ data: 'patata' });\n});\n\n\nexport default apiRoute;\n"]},"metadata":{},"sourceType":"module"}